## Stream

`take()` should not `end()` twice when the parent ends prematurely:

	var s = stream.fromRange(1, 3).take(5);
	s.ends().forEach(log);
	// later:
	// -> 3

`skip()` should `end()` with undefined when the parent ends prematurely:

	var s = stream.fromRange(1, 3).skip(5);
	s.ends().forEach(log);
	// later:
	// -> undefined


Streams' `update()` should not be called if none of their parents were updated:

	var s1 = stream(1);
	var s2 = stream(2);
	var ones = s1.filter(function(x) { return x === 1; }).log('ones');
	var twos = s2.filter(function(x) { return x === 2; }).log('twos');
	var sums = stream.combine(ones, twos, function(x, y) {
		console.log('combine', x, 'and', y);
		return x + y;
	});

	stream.tick();
	// -> combine 1 and 2
	s1.update(100); // this will be filtered out
	stream.tick();
	// no effect

End.


