## Stream

`take()` should not `end()` twice when the parent ends prematurely:

	var s = stream.fromRange(1, 3).take(5);
	s.ends().forEach(log);
	// later:
	// -> 3

`skip()` should `end()` with undefined when the parent ends prematurely:

	var s = stream.fromRange(1, 3).skip(5);
	s.ends().forEach(log);
	// later:
	// -> undefined

`slice()` should return an empty stream if the range is empty:

	var s = stream.fromRange(0, 5).slice(3, 2);
	s.ends().forEach(log);
	// later:
	// -> undefined

`slice()` should return an identical stream if start is negative or end
is greater than what the parent is able to offer:

	var s = stream.fromRange(0, 5).slice(-3, 10);
	s.forEach(log);
	// later:
	// -> 0; 1; 2; 3; 4; 5

`leave(n)` should return as many values as it can if the parent ends
prematurely:

	var s = stream.fromRange(1, 3);
	s.leave(5).forEach(log);
	// later:
	// -> 1; 2; 3

	var s2 = stream.fromRange(1, 0);
	s.leave(5).forEach(log);
	// no effect

`leave(n)` is `n` (+ X -- find out why!) ticks behind its parent stream.

	var timer = stream.fromRange(0, 5);
	var parent = stream.fromRange(0, 2);
	var leftovers = parent.leave(1);
	parent.onEnd(function() {
		console.log('[' + timer.value + ': parent end]')
	});
	leftovers.onEnd(function() {
		console.log('[' + timer.value + ': leftovers end]');
	});

	stream.combineWhenAll(
		timer, parent, stream.merge(stream('?'), leftovers),
		function(time, p, l) {
		console.log('[' + time + ': ' + p + ' ' + l + ']');
	});
	stream.tick(10);
	// TODO figure out what's wrong with this!
	// x-> [0: 0 ?]; [1: 1 ?]; [2: 2 ?]; [3: 3 ?]; [4: 3 ?]; [5: 3 ?]; [5: parent end]; [6: 3 2]; [6: 3 3]; [6: leftovers end]

Streams' `update()` should not be called if none of their parents were updated:

	var s1 = stream();
	var s2 = stream();
	var ones = s1.filter(function(x) { return x === 1; });
	var twos = s2.filter(function(x) { return x === 2; });
	var sums = stream.combine(ones, twos, function(x, y) {
		console.log('combine', x, 'and', y);
		return x + y;
	});

	// initial values to 'ones' and 'twos'
	s1.update(1);
	s2.update(2);
	stream.tick();
	// -> combine 1 and 2
	s1.update(100); // this will be filtered out
	stream.tick();
	// no effect

`fromArray()` works with empty arrays:

	var s = stream.fromArray([]);
	s.forEach(function(value) {
		console.log('got value', value);
		throw new Error('not called');
	});
	s.onEnd(function(value) {
		console.log('end', value);
	});
	s.tick();
	// -> end undefined

`fromArray()` can be ended:

	var s = stream.fromArray([1,2,3,4,5]);
	s.forEach(function(value) {
		console.log(value);
		if (value === 3) {
			s.end();
		}
	});
	s.onEnd(function(value) {
		console.log('end', value);
	});
	s.tick(4);
	// -> 1; 2; 3; end 3

`count` should count:

	var s = stream.count();
	s.forEach(log);
	s.onEnd(log);
	s.tick(3);
	// -> 0; 1; 2
	s.end();
	s.tick();
	// -> 2

`end` should end the stream:

	var s = stream();
	s.end();
	console.log(s.ended());
	// x-> true

End.

