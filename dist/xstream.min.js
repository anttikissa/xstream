function plus(t,e){return t+e}function inc(t){return t+1}function contains(t,e){return-1!==t.indexOf(e)}function copyArray(t){return Array.prototype.slice.apply(t)}function terminate(){process.exit(0)}function assert(t,e){if(!t){if(e){var s=new Error("assert failed: "+e);throw s.skipLines=3,s}var s=new Error("assert failed");throw s.skipLines=3,s}}function expect(t){var e=consoleOutput.shift();assert("string"==typeof e,'expected "'+t+'", got no output'),assert(e===t,'expected "'+t+'", got "'+e+'"')}function expectNoOutput(){assert(0===consoleOutput.length,'expected no output, got "'+consoleOutput[0])}function log(){console.log.apply(console.log,arguments)}function Stream(t){this.value=t}function stream(t){return new Stream(t)}function testAll(t,e,s){var r=1;t=t||test;for(var a in t)try{var n=s?s+"."+r:r,o=e?e+"."+a:a;log("Test "+n+": "+o+"\n"),t[a](),expectNoOutput(),testAll(t[a],o,n),r++}catch(u){log("Error:",u.message+"\n"),log(u.stack.split("\n").slice(u.skipLines||0).join("\n")),terminate()}}var consoleOutput=[];test={},test.Stream=function(){assert("object"==typeof new Stream),assert(new Stream instanceof Stream),assert(void 0===(new Stream).value),assert(123===new Stream(123).value)},stream.streamsToUpdate=[],test.stream=function(){assert("function"==typeof stream),assert(stream()instanceof Stream)},stream.log=function(){function t(t){return"string"==typeof t||"number"==typeof t?String(t):require("util").inspect(t)}var e=copyArray(arguments).map(t).join(" ");consoleOutput.push(e),console.log(e)},test.stream.log=function(){stream.log("hello"),expect("hello")},Stream.prototype.set=function(t){return stream.streamsToUpdate.push(this),this.newValue=t,this},test.Stream.set=function(){var t=stream(),e=t.set(123);assert(t===e,"stream.set() should return the stream itself"),assert(contains(stream.streamsToUpdate,t)),assert(void 0===t.value,"stream.value should be undefined before tick()"),stream.tick(),assert(!contains(stream.streamsToUpdate,t),"tick should clear stream.streamsToUpdate"),assert(123===t.value,"stream.value should be set after tick()")},stream.tick=function(){for(var t=0,e=stream.streamsToUpdate.length;e>t;t++){var s=stream.streamsToUpdate[t];s.value=s.newValue,delete s.newValue}stream.streamsToUpdate=[]},test.stream.tick=function(){stream.tick()},module.exports=stream,testAll();