function toArray(t){return Array.prototype.slice.apply(t)}function keys(t){if(Object.keys)return Object.keys(t);var n=[];for(var e in t)t.hasOwnProperty(e)&&n.push(e);return n}function pluck(t){return function(n){return n[t]}}function find(t,n){for(var e=0,r=t.length;r>e;e++){{t[e]}if(n(t[e]))return t[e]}}function defer(t){function n(){e||t()}var e=!1;return process.nextTick(n),function(){e=!0}}function Transaction(){var t=this;this.cancel=defer(function(){t.commit()}),this.ops=[]}function Stream(t){this.listeners=[],this.children=[],this.value=void 0,this.id=stream.nextId++,void 0!==t&&this.set(t)}Transaction.prototype.set=function(t,n){this.ops.push([t,n])},Transaction.prototype.commit=function(){this.cancel&&this.cancel(),stream.tx===this&&delete stream.tx;for(var t={},n=[],e=0,r=this.ops.length;r>e;e++){{var a=this.ops[e],o=a[0];a[1]}o.newValue=a[1],t[o.id]||(n.push(o),t[o.id]=!0)}var s=stream.updateOrder(n);console.log("nodesToUpdate",s.map(function(t){return t.id}))},Stream.prototype={broadcast:function(){for(var t=0,n=this.listeners.length;n>t;t++)this.listeners[t](this.value)},forEach:function(t){return this.listeners.push(t),this},set:function(t,n){var e=this;if(n)return setTimeout(function(){var n=stream.transaction();n.set(e,t)},n),this;var r=stream.transaction();return r.set(e,t),this},map:function(t){return stream.dependency(this,stream(),function(n,e){console.log("updating",this.id),e(t(n))})},filter:function(t){return stream.dependency(this,stream(),function(n,e){t(n)&&e(n)})},uniq:function(){return stream.dependency(this,stream(),function(t,n){this.value!==t&&n(t)})},reduce:function(t){return stream.dependency(this,stream(),function(n,e){e(this.value?t(this.value,n):n)})},toString:function(){return"stream("+this.value+", id: "+this.id+")"},commit:function(){return stream.transaction().commit(),this}};var stream=function(t){return new Stream(t)};stream.nextId=0,stream.transaction=function(){return stream.tx||(stream.tx=new Transaction)},stream.fromArray=function(t){var n=stream(),e=function(){t.length&&(n.set(t.shift()),defer(e))};return e(),n},stream.fromValues=function(){var t=Array.prototype.slice.call(arguments);return stream.fromArray.call(stream,t)},stream.fromString=function(t){return stream.fromArray(t.split(""))},stream.dependency=function(t,n,e){return t.children.push([n]),n.f=e,n},stream.combine=function(){var t=stream(),n=toArray(arguments),e=n.pop();return n.forEach(function(r){stream.dependency(r,t,function(r,a){var o=n.map(function(t){return t.hasOwnProperty("newValue")?t.newValue:t.value});console.log("combine updating",t.id),console.log("from parents",n.map(function(t){return t.id})),console.log("values",o),a(e.apply(null,o))})}),t},stream.merge=function(){var t=toArray(arguments),n=stream();return t.forEach(function(t){stream.dependency(t,n,function(t,n){n(t)})}),n},stream.mergeLatest=function(t){var n=t();return streams.forEach(function(t){n.rewire(t)}),n},stream.zip=function(){var t=toArray(arguments);return t.push(Array),stream.combine.apply(null,t)},stream.updateOrder=function(t){function n(t){return t.children.map(function(t){return t[0]})}function e(t){allNodes[t.id]=t,n(t).forEach(function(t){parentCounts[t.id]=(parentCounts[t.id]||0)+1,e(t)})}function r(t){var e=allNodes[t],r=n(e);r.forEach(function(t){parentCounts[t.id]--}),delete parentCounts[t],delete allNodes[t],nodesToUpdate.push(e)}for(console.log("updateOrder",t.map(pluck("id"))),parentCounts={},allNodes={},nodesToUpdate=[],t.forEach(function(t){parentCounts[t.id]=0,e(t)});;){var a=keys(parentCounts);if(0===a.length)break;var o=find(a,function(t){return 0===parentCounts[t]});r(o)}return nodesToUpdate},module.exports=stream;