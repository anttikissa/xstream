## The juicy parts

This chapter attempts to answers two questions:

- how does this thing work,
- how would I implement my own combinators like `.map`, `.combine`, etc?

## How to implement iterators like .fromArray()

TODO is 'iterator' the name we want to use here?

Iterator streams, like those produced by `.fromArray`, `.fromString`, or
`.fromRange`, share a few conventions.  They set the `state` member of
the stream to whatever state they need to complete the iteration, and
the `next` member of the stream to a function that performs one step
of the iteration.  Then they update the resulting stream with its
initial value (by calling it's `next` method, or otherwise), and finally
make sure `next` gets called on each tick by calling `.forEach(result.next)`

Here's a the blueprint of a function that creates an iterator stream:

	function iteratorStream(args) {
		var result = stream();
		result.state = "some state here";
		result.next = function next() {
			if ("end condition for iteration, using .state") {
				return this.end();
			}

			var newValue = "iterate one step, change .state accordingly";
			this.set(newValue);
		};

		result.next(); // OR result.set(initialValue);
		return result.forEach(result.next);
	}

For instance, to create a stream that factorizes a number:

	// Is x a factor of y?
	function isFactor(x, y) {
		return !((y / x) % 1);
	}

	// Return the lowest factor of number.
	function lowestFactor(number) {
		for (var i = 2; i < number; i++) {
			if (isFactor(i, number)) {
				return i;
			}
		}
		return number;
	}

	function factorize(number) {
		var result = stream();
		result.state = number;

		result.next = function next() {
			if (this.state === 1) {
				return this.end();
			}

			var factor = lowestFactor(this.state);
			this.state = this.state / factor;
			this.set(factor);
		};

		result.next();

		return result.forEach(result.next);
	}

	factorize(2002).forEach(function(factor) {
		console.log(factor);
	});
	stream.tick(4);
	// -> 2; 7; 11; 13

### link / unlink

### taking care of .ends(), .errors()

### rewire

### Design

What principles guided the design of the internals?

Debuggability

Readability

Power to the people (the tools used to implement primitives such as
`map` and `filter' should be given to any user of the library)

Managing complexity: this library attempts to do many different things
at once, so it's on an inevitable path towards death by complexity.  How
to manage complexity?

Attempts to tackle complexity by itself are doomed to fail.  The only
possible solution is to cut its roots one by one.  You can never beat
complexity, but you can find spots where you can coexist with it.

- solving a simple problem at a time
- figure out a locally applicable solution that works reasonably well
within the specified constraints.  
- more complex behavior may emerge out of these simple solutions (and comes without warranty)

Example? "Atomic value propagation" is one problem.

"Iterating over streams such that streams are kept synchronized" is
another.

"That .end() should work in reasonable cases" is a problem.




, user should be able to implement any of the
primitives by themselves

Design

### How to read the source code

Conventions, figure out a good format for type signatures
Should pick a convention for argument names, a, b, c / x, y, z, or something

Maybe also a part:

## Practical development

- Debugging
- performance analysis
- making sure things are garbage collected, etc.

whenever that information becomes available.

## Utils

- lots of these, probably will need
- plus, inc, mul, count, min, max, pluck, limit, etc.

