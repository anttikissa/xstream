## Introduction

> "It is better to have 100 functions operate on one data structure than
> 10 functions on 10 data structures." â€”Alan Perlis

This library is about streams.

A stream has two interesting properties:

- It has a /a current value/ (which may be `undefined`)
- It /broadcasts/ its value when it's updated

An example of using streams:

	var s1 = stream();
	var s2 = stream();
	var s3 = stream.combine(s1, s2, function(a, b) { return a + b });
	s1.update(1);
	s2.update(2);
	s3.forEach(function(value) {
		console.log(value);
	});

	stream.tick();
	// -> 3

That's it.  Mostly.

### Streams: three perspectives

You can view streams from different perspectives.

1. Streams as data-flow graphs

Streams form a network of nodes, where some nodes act as sources and
others derive values from them.  The focus is on the /values/ of the
nodes.  Communication happens whenever a value somewhere changes, and
the rest of the nodes receive their right values automatically and
atomically.

Signals in FRP (?); Properties of Bacon.js; some kind of Observables in
RxJS; Likely mostly `map`, `combine`, and the ilk (not much else?)

2. Streams as event sources

We're interested in what happens when streams update; in other words,
/update events/.  Sometimes we want some data with the events (for
example, coordinates associated with a mouse click), sometimes we're
just interested in the fact that the event happened (for example, a
"Dismiss" button was pressed).

There is still a graph, as event streams may be filtered, mapped,
collected, etc. into other meaningful streams.  But the operations that
are performed are likely different.  `merge`, `filter`, `sampledBy`,
etc. TODO complete this analysis after actually writing something.

3. Streams as data structures

In this views, streams are treated like a kind of asynchronous arrays
whose values are spread out in time.
The fact that streams can be updated is just an implementation artifact
to... (or:) Ticks/transactions are used not for synchronizing data
updates but as a means of iteration.

TODO talk about ticks.



## A sketch

### Simple dependencies: .map, .filter, .combine

### merge

### Maybe .reduce too

### stream.from() -- kitchen sink

### rewire

### what does `tick()` do?

### Some nice examples (fibonacci? snake?)

Maybe to its own chapter:

## Time-based things (eventually)

### delay (both for ticks and millisecond timeouts)
### pause(), play(), etc.

