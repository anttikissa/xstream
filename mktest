#!/usr/bin/env node
// vim: set filetype=javascript:

var minTest = 1;
var maxTest = 30;

var fs = require('fs');

var args = process.argv.slice(2);

if (!args.length) {
	console.log('Usage: mktest file ...');
	process.exit(1);
}

var testLines = [];

function push(line) {
	var actual = line || '';

	testLines.push(actual);
}

args.forEach(function(filename) {
	var testIdx = 0;

	testLines.push('// Tests from ' + filename + ':');

	var lines = fs.readFileSync(filename, 'utf8').split('\n');
	lines.pop();

	var prevLineType;
	var wasEmptyCodeLine = false;
	var wasEmptyCommentLine = false;
	var prevComment = [];
	var insideFunction = 0;
	function prepend(prefix) { return function(s) { return prefix + s; } }
	var afterFunction = '';
	function escape(s) { return s.replace(/\'/g, '\\\''); }

	lines.forEach(function(line, idx) {
		idx = idx + 1;
		var indented = !!line.match(/^\t/);
		var followsCodeLine = prevLineType === 'code';
		var followsCommentLine = prevLineType !== 'code';
		var isEmpty = line.trim() === '';
		if (indented || (isEmpty && followsCodeLine)) {
			if (prevLineType !== 'code') {
				testIdx++;
				var testDescription = 'test ' + testIdx + ', line ' + idx +
					' ' + escape(prevComment.join(' ')).
					trim().replace(/:$/, '');
				push();
				push('// test ' + testIdx + ', line ' + idx);
				testLines.push('//');
				prevComment.map(prepend('// ')).forEach(push);
				prevComment = [];
				push('(function(console) {');
				afterFunction = '\tstream.transaction().commit();\n' + 
					'})(console(\'' + testDescription + '\'));';
				var enabled = minTest <= testIdx && testIdx <= maxTest;
				if (enabled) {
					push("\tglobal.console.log('" + testDescription + "');");
				}
			}
			if (line.match('// later')) {
				insideFunction++;
				push('\tlater(function() {');
			}
			var enabled = minTest <= testIdx && testIdx <= maxTest;
			if (!enabled) {
				push('//' + line);
				prevLineType = 'code';
				return;
			}
			if (wasEmptyCodeLine) {
				push('');
			}
			if (!isEmpty) {
				// UGH HACK
				line = line.replace(/\(log/, '(log(console)');
				push(line);
			}
			var assertPrintedMatch = line.match(/\/\/ -> (.*)/);
			if (assertPrintedMatch) {
				var matches = assertPrintedMatch[1].split('; ');
				matches.forEach(function(output) {
					push("\tassertPrinted(console, '" + escape(output) + "');");
				});
			}
			if (line.match(/\/\/ no effect/)) {
				push("\tlater(function() { assertPrinted(console, null); });");
			}
			prevLineType = 'code';
		} else {
			if (prevLineType === 'code') {
				while (insideFunction) {
					push('\t});');
					insideFunction--;
				}
				push(afterFunction);
			}
			if (wasEmptyCommentLine) {
				prevComment = [];
			}
			prevComment.push(line);
			prevLineType = 'comment';
		}
		wasEmptyCodeLine = followsCodeLine && isEmpty;
		wasEmptyCommentLine = followsCommentLine && isEmpty;
	});
	if (prevLineType === 'code') {
		push(afterFunction);
	}
});

var testJs = fs.readFileSync('misc/test-prelude.js', 'utf8') +
	testLines.join('\n');

console.log(testJs);

